package com.example.ai_advent_25.data.agents

import android.content.Context
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.lang.reflect.Method
import java.lang.reflect.Modifier

/**
 * –ê–≥–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Unit-—Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
class TestRunnerAgentRepository(
    private val context: Context
) {
    
    companion object {
        private const val TAG = "TestRunnerAgentRepository"
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
     */
    suspend fun runAllTests(): Result<TestResult> {
        Log.d(TAG, "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")
        
        return try {
            withContext(Dispatchers.IO) {
                val testResults = mutableListOf<SingleTestResult>()
                var totalTests = 0
                var passedTests = 0
                var failedTests = 0
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
                val testClasses = findTestClasses()
                Log.d(TAG, "–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤: ${testClasses.size}")
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ
                testClasses.forEach { testClass ->
                    val classResults = runTestClass(testClass)
                    testResults.addAll(classResults)
                    
                    classResults.forEach { result ->
                        totalTests++
                        if (result.success) {
                            passedTests++
                        } else {
                            failedTests++
                        }
                    }
                }
                
                val overallSuccess = failedTests == 0
                
                Log.d(TAG, "–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—Å–µ–≥–æ: $totalTests, –ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests, –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failedTests")
                
                val result = TestResult(
                    success = overallSuccess,
                    exitCode = if (overallSuccess) 0 else 1,
                    output = buildTestOutput(testResults),
                    testCount = totalTests,
                    passedTests = passedTests,
                    failedTests = failedTests,
                    testResults = testResults
                )
                
                Result.success(result)
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤", e)
            Result.failure(e)
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
     */
    suspend fun runSpecificTest(testClassName: String): Result<TestResult> {
        Log.d(TAG, "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç: $testClassName")
        
        return try {
            withContext(Dispatchers.IO) {
                val testClass = try {
                    Class.forName(testClassName)
                } catch (e: ClassNotFoundException) {
                    Log.e(TAG, "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: $testClassName", e)
                    return@withContext Result.failure(Exception("–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: $testClassName"))
                }
                
                val testResults = runTestClass(testClass)
                val totalTests = testResults.size
                val passedTests = testResults.count { it.success }
                val failedTests = totalTests - passedTests
                val overallSuccess = failedTests == 0
                
                Log.d(TAG, "–¢–µ—Å—Ç $testClassName –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ: $totalTests, –ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests, –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failedTests")
                
                val result = TestResult(
                    success = overallSuccess,
                    exitCode = if (overallSuccess) 0 else 1,
                    output = buildTestOutput(testResults),
                    testCount = totalTests,
                    passedTests = passedTests,
                    failedTests = failedTests,
                    testClassName = testClassName,
                    testResults = testResults
                )
                
                Result.success(result)
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ $testClassName", e)
            Result.failure(e)
        }
    }

    /**
     * –ò—â–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
     */
    private fun findTestClasses(): List<Class<*>> {
        val testClasses = mutableListOf<Class<*>>()
        
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º runtime —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ main –∫–æ–¥–µ
            val runtimeTestClass = SimpleTests::class.java
            testClasses.add(runtimeTestClass)
            Log.d(TAG, "–î–æ–±–∞–≤–ª–µ–Ω runtime —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å: ${runtimeTestClass.simpleName}")
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤", e)
        }
        
        return testClasses
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∞—Å—Å–µ
     */
    private fun runTestClass(testClass: Class<*>): List<SingleTestResult> {
        val results = mutableListOf<SingleTestResult>()
        
        try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            val testInstance = testClass.getDeclaredConstructor().newInstance()
            
            // –ò—â–µ–º –º–µ—Ç–æ–¥—ã —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @Test
            val testMethods = testClass.declaredMethods.filter { method ->
                method.isAnnotationPresent(org.junit.Test::class.java) &&
                Modifier.isPublic(method.modifiers) &&
                method.parameterCount == 0
            }
            
            Log.d(TAG, "–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ ${testClass.simpleName}: ${testMethods.size}")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
            testMethods.forEach { method ->
                val result = runSingleTest(testInstance, method)
                results.add(result)
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ ${testClass.simpleName}", e)
            results.add(
                SingleTestResult(
                    className = testClass.simpleName,
                    methodName = "class_initialization",
                    success = false,
                    errorMessage = "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞: ${e.message}"
                )
            )
        }
        
        return results
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç
     */
    private fun runSingleTest(testInstance: Any, method: Method): SingleTestResult {
        val startTime = System.currentTimeMillis()
        
        return try {
            Log.d(TAG, "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç: ${method.name}")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º JUnit —Ç–µ—Å—Ç
            method.invoke(testInstance)
            
            val duration = System.currentTimeMillis() - startTime
            
            Log.d(TAG, "–¢–µ—Å—Ç ${method.name} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms")
            
            SingleTestResult(
                className = testInstance.javaClass.simpleName,
                methodName = method.name,
                success = true,
                duration = duration
            )
            
        } catch (e: Exception) {
            val duration = System.currentTimeMillis() - startTime
            val errorMessage = e.cause?.message ?: e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            
            Log.e(TAG, "–¢–µ—Å—Ç ${method.name} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: $errorMessage", e)
            
            SingleTestResult(
                className = testInstance.javaClass.simpleName,
                methodName = method.name,
                success = false,
                errorMessage = errorMessage,
                duration = duration
            )
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
     */
    private fun buildTestOutput(testResults: List<SingleTestResult>): String {
        val output = StringBuilder()
        
        output.append("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í ===\n\n")
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
        val groupedResults = testResults.groupBy { it.className }
        
        groupedResults.forEach { (className, results) ->
            output.append("üìÅ $className:\n")
            
            results.forEach { result ->
                val status = if (result.success) "‚úÖ" else "‚ùå"
                val duration = if (result.duration != null) " (${result.duration}ms)" else ""
                
                output.append("  $status ${result.methodName}$duration\n")
                
                if (!result.success && result.errorMessage != null) {
                    output.append("    –û—à–∏–±–∫–∞: ${result.errorMessage}\n")
                }
            }
            
            output.append("\n")
        }
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        val total = testResults.size
        val passed = testResults.count { it.success }
        val failed = total - passed
        
        output.append("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n")
        output.append("–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total\n")
        output.append("–ü—Ä–æ–π–¥–µ–Ω–æ: $passed\n")
        output.append("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failed\n")
        output.append("–°—Ç–∞—Ç—É—Å: ${if (failed == 0) "–£–°–ü–ï–•" else "–ï–°–¢–¨ –û–®–ò–ë–ö–ò"}\n")
        
        return output.toString()
    }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
 */
data class SingleTestResult(
    val className: String,
    val methodName: String,
    val success: Boolean,
    val errorMessage: String? = null,
    val duration: Long? = null
)

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
data class TestResult(
    val success: Boolean,
    val exitCode: Int,
    val output: String,
    val testCount: Int,
    val passedTests: Int,
    val failedTests: Int,
    val testClassName: String? = null,
    val testResults: List<SingleTestResult> = emptyList()
) {
    val summary: String
        get() = buildString {
            append("–¢–µ—Å—Ç—ã: $testCount")
            append(", –ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests")
            append(", –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failedTests")
            append(", –°—Ç–∞—Ç—É—Å: ${if (success) "–£–°–ü–ï–•" else "–û–®–ò–ë–ö–ê"}")
        }
}
